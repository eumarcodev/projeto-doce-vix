// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  guid        String    @unique @default(uuid())
  name        String
  description String
  Product     Product[]
  File        File?     @relation(fields: [fileId], references: [id])
  fileId      Int?
  createdAt   DateTime
  updatedAt   DateTime
}

model File {
  id        Int        @id @default(autoincrement())
  guid      String     @unique @default(uuid())
  path      String
  Category  Category[]
  Product   Product[]
  createdAt DateTime
  updatedAt DateTime
}

model Product {
  id          Int         @id @default(autoincrement())
  guid        String      @unique @default(uuid())
  name        String
  description String
  price       Float
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  files       File?       @relation(fields: [fileId], references: [id])
  fileId      Int?
  createdAt   DateTime
  updatedAt   DateTime
  dayOfWeek   DayOfWeek?  @relation(fields: [dayOfWeekId], references: [id])
  dayOfWeekId Int?
  OrderItem   OrderItem[]
}

model DayOfWeek {
  id        Int       @id @default(autoincrement())
  guid      String    @unique @default(uuid())
  name      String
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
}

model User {
  id        Int      @id @default(autoincrement())
  guid      String   @unique @default(uuid())
  name      String
  email     String
  password  String
  isActive  Boolean  @default(true)
  role      UserRole @default(USER)
  createdAt DateTime
  updatedAt DateTime
  Token     Token[]
  Order     Order[]

  @@map("users")
}

model Token {
  id        Int      @id @default(autoincrement())
  guid      String   @unique @default(uuid())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expireIn  DateTime
  role      String
  createdAt DateTime
  updatedAt DateTime

  @@map("Tokens")
}

model Order {
  id        Int         @id @default(autoincrement())
  guid      String      @unique @default(uuid())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime
  updatedAt DateTime
  total     Float
  status    OrderStatus @default(PREPARING)
  itens     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  guid      String   @unique @default(uuid())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime
  updatedAt DateTime
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
}

enum OrderStatus {
  PREPARING
  READY
}

enum UserRole {
  ADMIN
  USER
}
